/**
* localdb = {
  THROW_RETURN(type, message, data)
  SET(namespace, data, params)
  GET(namespace, params)
  REMOVE(namespace, params),
  REMOVE_ALL(namespace)
}
*/
let localdb = {};



/**
* @THROW_RETURN
*************
* #type = {SUCCESS, ERROR}.
* message = a message associated with the type.
* #data = return the data on create, update, remove action
*/
localdb.THROW_RETURN = function(type, message = undefined, data = undefined) {
  var ret = {
    error: {
      value: null,
      message: null
    },
    success: {
      message: null,
      data: null
    }
  };
  switch (type) {
    case 'SUCCESS':
      ret.error.value = false;
      if(typeof message != 'undefined') {
        ret.success.message = message;
      }
      if(typeof data != 'undefined') {
        ret.success.data = data;
      }
      break;
    case 'ERROR':
      eet.error.value = true;
      if(typeof message != 'undefined') {
        ret.error.message = message;
      }
      break;
    default:
  }
  return ret;
}



/**
* @SAVE_DATA
*********
* #namespace = path name of local database
* #data = data
* #on_success_message =
*/
localdb.SAVE_DATA = function(namespace, data, on_success_message) {
  try {
    localStorage.setItem(namespace, JSON.stringify(data));
    return localdb.THROW_RETURN('SUCCESS', on_success_message);
  } catch(e) {
    return localdb.THROW_RETURN('ERROR', e);
  }
}



/**
* @SET
*************
* #namespace = path name of local database
* #data = data
* #params = function bind with findIndex to edit a specific data
*/
localdb.SET = function(namespace, data, params = undefined) {
  // Récupération de la donnée local.
  let getNamespace = JSON.parse(localStorage.getItem(namespace));

  // Si la donnée n'existe pas, création d'une nouvelle.
  if (getNamespace == null) {
    localStorage.setItem(namespace, JSON.stringify('[]'));
    getNamespace = [];
  }

  // Si params n'est pas défini, ajout d'une nouvelle ligne.
  if (typeof params == 'undefined') {
    getNamespace.push(data);
    return localdb.SAVE_DATA(namespace, getNamespace, 'data created');
  } else {

    // Sinon on vérifie si la donnée existe.
    // Récupération de l'id dans le tableau.
    let findData = getNamespace.findIndex(params);

    // Si elle n'existe pas, ajout d'une nouvelle ligne.
    if (findData == -1) {
      getNamespace.push(data);
      return localdb.SAVE_DATA(namespace, getNamespace, 'no similar data, data created');
    } else {

      // Sinon la donnée a été trouvé.
      // On test si l'ancienne valeur n'est pas la même que la nouvelle.
      if (!JSON.stringify(getNamespace[findData]) === JSON.stringify(data)) {
        getNamespace[findData] = data;
        return localdb.SAVE_DATA(namespace, getNamespace, 'data updated');

      } else {
        // L'ancienne donnée a la même valeur que la nouvelle.
        return localdb.THROW_RETURN('ERROR', 'old data is similar to new data, data not updated');
      }

    }
  }
};



/**
* @GET
*************
* #namespace = path name of local database
* #params = function bind with filter to get a specific data
*/
localdb.GET = function(namespace, params = undefined) {
  // Récupération de la base de données.
  let getNamespace = JSON.parse(localStorage.getItem(namespace));

  // Si la base de donnée n'existe pas.
  if (getNamespace == null) {
    return localdb.THROW_RETURN('ERROR', 'database not found');
  } else {

    // Si aucun paramètre de filtre n'est passé.
    if (typeof params == 'undefined') {

      // Récupération de toutes les données.
      return localdb.THROW_RETURN('SUCCESS', 'database found', getNamespace);
    } else {

      // Recherche des données avec un paramètre de filtrage.
      let findData = getNamespace.filter(params);
      return localdb.THROW_RETURN('SUCCESS', 'database found with params', findData);
    }
  }
};



/**
* @REMOVE
*************
* #namespace = path name of local database
* #params = function bind with findIndex to remove a specific data
*/
localdb.REMOVE = function(namespace, params) {
  // Récupération des données.
  let getNamespace = localdb.GET(namespace, params);

  // Si error, retunr this return value from GET.
  if(getNamespace.error.value) {
    return getNamespace;
  } else {

    // Les données.
    let getAllData = getNamespace.success.data;
    let findData = getAllData.findIndex(params);

    // No index found with params. couldn't be removed.
    if (findData == -1) {
      return localdb.THROW_RETURN('ERROR', 'data not found in database');
    } else {
      // Data removed.
      getAllData.splice(findData, 1);
      return localdb.SAVE_DATA(namespace, getAllData, 'data removed');
    }
  }

};

/**
* @REMOVE_ALL
*************
* #namespace = path name of local database
*/
localdb.REMOVE_ALL = function(namespace) {
  try {

    // If de database is removed.
    localStorage.removeItem(namespace);
    return localdb.THROW_RETURN('SUCCESS', 'database removed');
  } catch(e) {

    // Error while removing database.
    return localdb.THROW_RETURN('ERROR', e);
  }
}


/**
*
*/
module.exports = localdb;
